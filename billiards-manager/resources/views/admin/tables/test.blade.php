@extends('layouts.admin')

@section('title', 'Qu·∫£n l√Ω b√†n - Billiards Management')

@section('content')
    <div class="mb-3">
  <label for="exampleFormControlInput1" class="form-label">Email address</label>
  <input type="email" class="form-control" id="exampleFormControlInput1" placeholder="name@example.com">
</div>
<div class="mb-3">
  <label for="exampleFormControlTextarea1" class="form-label">Example textarea</label>
  <textarea class="form-control" id="exampleFormControlTextarea1" rows="3"></textarea>
</div>
@endsection

{{-- @section('scripts')
    <script>
        // Bi·∫øn to√†n c·ª•c ƒë·ªÉ theo d√µi tr·∫°ng th√°i modal
        let isModalOpen = false;

        // D·ªØ li·ªáu b√†n t·ª´ server
        const tablesData = @json($tables->keyBy('id')->toArray());

        function showTableDetail(tableId) {
            if (isModalOpen) return;

            event?.stopPropagation();
            isModalOpen = true;

            const table = tablesData[tableId];
            if (!table) return;

            const modal = document.getElementById('tableDetailModal');
            const modalContent = document.getElementById('modalContent');

            modalContent.innerHTML = `
        <div class="p-6">
            <div class="flex justify-between items-start mb-4">
                <div>
                    <h2 class="text-xl font-bold text-gray-900">Chi ti·∫øt b√†n ${table.table_number}</h2>
                    <p class="text-gray-600">${table.table_name}</p>
                </div>
                <button type="button" onclick="closeModal()" class="text-gray-400 hover:text-gray-600">
                    <i class="fas fa-times text-xl"></i>
                </button>
            </div>

            <div class="space-y-3 mb-6">
                <div class="flex justify-between items-center py-2 border-b border-gray-100">
                    <span class="flex items-center text-gray-600">
                        <i class="fas fa-tag mr-3 text-blue-500"></i>
                        Lo·∫°i b√†n:
                    </span>
                    <span class="font-medium text-gray-800 capitalize">${table.type || 'N/A'}</span>
                </div>

                <div class="flex justify-between items-center py-2 border-b border-gray-100">
                    <span class="flex items-center text-gray-600">
                        <i class="fas fa-clock mr-3 text-green-500"></i>
                        Gi√°/gi·ªù:
                    </span>
                    <span class="font-bold text-gray-900">${formatCurrency(table.hourly_rate)} ƒë</span>
                </div>

                <div class="flex justify-between items-center py-2 border-b border-gray-100">
                    <span class="flex items-center text-gray-600">
                        <i class="fas fa-map-marker-alt mr-3 text-purple-500"></i>
                        V·ªã tr√≠:
                    </span>
                    <span class="font-medium text-gray-800">${table.position || 'Kh√¥ng r√µ'}</span>
                </div>

                <div class="flex justify-between items-center py-2 border-b border-gray-100">
                    <span class="flex items-center text-gray-600">
                        <i class="fas fa-info-circle mr-3 text-orange-500"></i>
                        Tr·∫°ng th√°i:
                    </span>
                    <span class="font-medium">${getStatusBadge(table.status)}</span>
                </div>
            </div>

            <div class="flex space-x-3">
                <button type="button" onclick="closeModal()"
                    class="flex-1 bg-gray-300 text-gray-700 py-3 rounded-lg font-medium hover:bg-gray-400 transition">
                    ƒê√≥ng
                </button>
                ${table.status === 'available' ? `
                                            <button type="button" onclick="handleStartTable(${table.id})"
                                                class="flex-1 bg-gray-600 text-white py-3 rounded-lg font-medium hover:bg-gray-700 transition">
                                                B·∫Øt ƒë·∫ßu
                                            </button>
                                            ` : table.status === 'in_use' ? `
                                            <button type="button" onclick="handleStopTable(${table.id})"
                                                class="flex-1 bg-green-600 text-white py-3 rounded-lg font-medium hover:bg-green-700 transition">
                                                K·∫øt th√∫c
                                            </button>
                                            ` : ''}
            </div>
        </div>
    `;

            modal.classList.remove('hidden');
        }

        function closeModal() {
            const modal = document.getElementById('tableDetailModal');
            modal.classList.add('hidden');
            isModalOpen = false;
        }

        // H√†m h·ªó tr·ª£
        function getStatusBadge(status) {
            const statusMap = {
                'available': '<span class="text-gray-600">‚è∏Ô∏è Ch∆∞a b·∫≠t</span>',
                'in_use': '<span class="text-green-600">‚ñ∂Ô∏è ƒêang s·ª≠ d·ª•ng</span>',
                'maintenance': '<span class="text-yellow-600">üîß B·∫£o tr√¨</span>'
            };
            return statusMap[status] || '<span class="text-gray-600">Kh√¥ng x√°c ƒë·ªãnh</span>';
        }

        function formatCurrency(amount) {
            return new Intl.NumberFormat('vi-VN').format(amount);
        }

        // ƒê√≥ng modal khi click b√™n ngo√†i
        document.addEventListener('click', function(e) {
            const modal = document.getElementById('tableDetailModal');
            if (isModalOpen && e.target === modal) {
                closeModal();
            }
        });

        // NgƒÉn ch·∫∑n s·ª± ki·ªán click trong modal lan ra ngo√†i
        document.getElementById('tableDetailModal').addEventListener('click', function(e) {
            e.stopPropagation();
        });

        // X·ª≠ l√Ω filter kh√¥ng reload trang
        function applyFilter() {
            const form = document.getElementById('filterForm');
            const formData = new FormData(form);
            const params = new URLSearchParams(formData);

            // Chuy·ªÉn h∆∞·ªõng v·ªõi params filter
            window.location.href = '{{ url()->current() }}?' + params.toString();
        }

        function resetFilter() {
            window.location.href = '{{ url()->current() }}';
        }

        // X·ª≠ l√Ω c√°c action
        function startTable(tableId) {
            event?.stopPropagation();
            handleStartTable(tableId);
        }

        function stopTable(tableId) {
            event?.stopPropagation();
            handleStopTable(tableId);
        }

        function handleStartTable(tableId) {
            closeModal();

            Swal.fire({
                title: 'B·∫Øt ƒë·∫ßu s·ª≠ d·ª•ng?',
                text: "B·∫°n c√≥ ch·∫Øc mu·ªën b·∫Øt ƒë·∫ßu s·ª≠ d·ª•ng b√†n n√†y?",
                icon: 'question',
                showCancelButton: true,
                confirmButtonColor: '#10b981',
                cancelButtonColor: '#6b7280',
                confirmButtonText: 'B·∫Øt ƒë·∫ßu',
                cancelButtonText: 'H·ªßy'
            }).then((result) => {
                if (result.isConfirmed) {
                    // G·ªçi API b·∫Øt ƒë·∫ßu s·ª≠ d·ª•ng b√†n
                    fetch(`/tables/${tableId}/start`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'X-CSRF-TOKEN': '{{ csrf_token() }}'
                            }
                        })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                Swal.fire('Th√†nh c√¥ng!', 'ƒê√£ b·∫Øt ƒë·∫ßu s·ª≠ d·ª•ng b√†n', 'success');
                                // Reload trang ƒë·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i
                                setTimeout(() => window.location.reload(), 1000);
                            } else {
                                Swal.fire('L·ªói!', data.message || 'C√≥ l·ªói x·∫£y ra', 'error');
                            }
                        })
                        .catch(error => {
                            Swal.fire('L·ªói!', 'Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server', 'error');
                        });
                }
            });
        }

        function handleStopTable(tableId) {
            closeModal();

            Swal.fire({
                title: 'K·∫øt th√∫c s·ª≠ d·ª•ng?',
                text: "B·∫°n c√≥ ch·∫Øc mu·ªën k·∫øt th√∫c phi√™n ch∆°i?",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#ef4444',
                cancelButtonColor: '#6b7280',
                confirmButtonText: 'K·∫øt th√∫c',
                cancelButtonText: 'H·ªßy'
            }).then((result) => {
                if (result.isConfirmed) {
                    // G·ªçi API k·∫øt th√∫c s·ª≠ d·ª•ng b√†n
                    fetch(`/tables/${tableId}/stop`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'X-CSRF-TOKEN': '{{ csrf_token() }}'
                            }
                        })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                Swal.fire('Th√†nh c√¥ng!', 'ƒê√£ k·∫øt th√∫c phi√™n ch∆°i', 'success');
                                // Reload trang ƒë·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i
                                setTimeout(() => window.location.reload(), 1000);
                            } else {
                                Swal.fire('L·ªói!', data.message || 'C√≥ l·ªói x·∫£y ra', 'error');
                            }
                        })
                        .catch(error => {
                            Swal.fire('L·ªói!', 'Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server', 'error');
                        });
                }
            });
        }

        function editTable(tableId) {
            // Chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang edit
            window.location.href = `/admin/tables/${tableId}/edit`;
        }

        function confirmDelete(tableId) {
            event?.stopPropagation();

            Swal.fire({
                title: 'X√°c nh·∫≠n x√≥a?',
                text: "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a b√†n n√†y?",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'X√≥a',
                cancelButtonText: 'H·ªßy'
            }).then((result) => {
                if (result.isConfirmed) {
                    // G·ªçi API x√≥a
                    fetch(`/admin/tables/${tableId}`, {
                            method: 'DELETE',
                            headers: {
                                'Content-Type': 'application/json',
                                'X-CSRF-TOKEN': '{{ csrf_token() }}'
                            }
                        })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                Swal.fire('Th√†nh c√¥ng!', 'ƒê√£ x√≥a b√†n', 'success');
                                // Reload trang ƒë·ªÉ c·∫≠p nh·∫≠t danh s√°ch
                                setTimeout(() => window.location.reload(), 1000);
                            } else {
                                Swal.fire('L·ªói!', data.message || 'C√≥ l·ªói x·∫£y ra', 'error');
                            }
                        })
                        .catch(error => {
                            Swal.fire('L·ªói!', 'Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server', 'error');
                        });
                }
            });
        }

        function showAddTableForm() {
            window.location.href = '/admin/tables/create';
        }

        // NgƒÉn ch·∫∑n form submit m·∫∑c ƒë·ªãnh
        document.addEventListener('DOMContentLoaded', function() {
            const forms = document.querySelectorAll('form');
            forms.forEach(form => {
                form.addEventListener('submit', function(e) {
                    e.preventDefault();
                    return false;
                });
            });
        });
    </script>
@endsection --}}

